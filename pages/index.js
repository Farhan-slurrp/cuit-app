import Head from "next/head";
import Link from "next/link";
import styles from "../styles/Home.module.css";
import moment from "moment";
import { useState } from "react";
import { useRouter } from "next/router";
import { useGlobalContext } from "../custom-hooks/context";

export async function getServerSideProps(context) {
  const res = await fetch(
    "https://afternoon-temple-94147.herokuapp.com/api/threads"
  );
  const data = await res.json();

  if (!data) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: {
      data,
    },
  };
}

export default function Home({ data }) {
  const { tokenInfo, addThread, deleteThread, editThread } = useGlobalContext();
  const [isEdit, setIsEdit] = useState(null);
  const [value, setValue] = useState(null);
  const router = useRouter();
  // Call this function whenever you want to
  // refresh props!
  const refreshData = () => {
    router.replace(router.asPath);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const data = await addThread(e);
    if (data.success) {
      refreshData();
    }
  };

  const handleEdit = async (threadId) => {
    const data = await editThread(value, threadId);
    if (data.success) {
      refreshData();
      setIsEdit(null);
    }
  };

  const handleDelete = async (threadId) => {
    const confirmDelete = confirm("Are you sure to delete?");
    if (confirmDelete) {
      const data = await deleteThread(threadId);
      if (data.success) {
        refreshData();
      }
    }
  };

  return (
    <div>
      <Head>
        <title>Cuit - Homepage</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/c.png" />
      </Head>

      <main className={styles.container}>
        {data.success && (
          <div className={styles.threads}>
            {tokenInfo && (
              <div className={styles.card}>
                <form
                  onSubmit={(e) => handleSubmit(e)}
                  autoComplete="off"
                  className={styles.formContainer}
                >
                  <textarea
                    className={styles.input}
                    type="text"
                    name="content"
                    placeholder="What's happening?"
                    required
                  />
                  <button type="submit" className={styles.submitbtn}>
                    Add Cuit
                  </button>
                </form>
              </div>
            )}
            {data.threads.map((thread) => (
              <div key={thread._id} className={styles.card}>
                <h3 className={styles.username}>@{thread.userName}</h3>
                <p className={styles.date}>
                  {moment(thread.createdAt).format("LLLL")}
                </p>
                {isEdit != thread._id && (
                  <p className={styles.content}>
                    {thread.content.split(" ").map((word, index) => {
                      if (word.charAt(0) == "#") {
                        return (
                          <span
                            key={index}
                            className={styles.hashtag}
                          >{`${word} `}</span>
                        );
                      } else return `${word} `;
                    })}
                  </p>
                )}
                {value && isEdit == thread._id && (
                  <input
                    value={value}
                    className={styles.editInput}
                    onChange={(e) => setValue(e.target.value)}
                  />
                )}
                <div className={styles.actionsContainer}>
                  <>
                    {tokenInfo &&
                      tokenInfo.user.userId == thread.userId &&
                      isEdit == thread._id && (
                        <div>
                          <button
                            className={styles.submitBtn}
                            onClick={() => handleEdit(thread._id)}
                          >
                            SUBMIT
                          </button>
                          <button
                            className={styles.cancelBtn}
                            onClick={() => setIsEdit(null)}
                          >
                            CANCEL
                          </button>
                        </div>
                      )}
                    {tokenInfo &&
                      tokenInfo.user.userId == thread.userId &&
                      !isEdit && (
                        <div>
                          <button
                            className={styles.editBtn}
                            onClick={() => {
                              setIsEdit(thread._id);
                              setValue(thread.content);
                            }}
                          >
                            EDIT
                          </button>
                          <button
                            className={styles.deleteBtn}
                            onClick={() => handleDelete(thread._id)}
                          >
                            DELETE
                          </button>
                        </div>
                      )}
                    <div></div>
                  </>
                  <Link href={`/threads/${thread._id}`}>
                    <a className={styles.repliesbtn}>REPLIES</a>
                  </Link>
                </div>
              </div>
            ))}
          </div>
        )}
      </main>
    </div>
  );
}

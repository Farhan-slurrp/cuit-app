import React, { useEffect, useState } from "react";
import ErrorPage from "../../components/NotFound";
import Head from "next/head";
import styles from "../../styles/SingleThread.module.css";
import moment from "moment";
import { useGlobalContext } from "../../custom-hooks/context";
import { useRouter } from "next/router";

export async function getServerSideProps(context) {
  const res = await fetch(
    `http://localhost:5000/api/threads/${context.params.id}`
  );
  const data = await res.json();

  if (!data) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: {
      data,
    },
  };
}

const SingleThread = ({ data }) => {
  const { tokenInfo, addComment, editComment, deleteComment } =
    useGlobalContext();
  const [isEdit, setIsEdit] = useState(null);
  const [value, setValue] = useState(null);

  const router = useRouter();

  const refreshData = () => {
    router.replace(router.asPath);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const payload = await addComment(e, data._id);
    if (payload.success) {
      refreshData();
    }
  };

  const handleEdit = async (commentId) => {
    const payload = await editComment(value, data._id, commentId);
    if (payload.success) {
      setIsEdit(null);
      refreshData();
    } else {
      console.log(payload.msg);
    }
  };

  const handleDelete = async (commentId) => {
    const confirmDelete = confirm("Are you sure to delete? ");
    if (confirmDelete) {
      const payload = await deleteComment(data._id, commentId);
      if (payload.success) {
        refreshData();
      } else {
        console.log(payload.msg);
      }
    }
  };

  useEffect(() => {
    console.log(data);
  }, []);

  if (data.success === false) {
    return (
      <>
        <Head>
          <title>404 Not Found</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/c.png" />
        </Head>
        <ErrorPage msg={data.msg} />
      </>
    );
  }

  return (
    <>
      <Head>
        <title>Cuit - Thread</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/c.png" />
      </Head>
      <main className={styles.container}>
        {data.success && (
          <div className={styles.threads}>
            <div key={data._id} className={styles.card}>
              <h3 className={styles.username}>@{data.userName}</h3>
              <p className={styles.date}>
                {moment(data.createdAt).format("LLLL")}
              </p>
              <p className={styles.content}>
                {data.content.split(" ").map((word, index) => {
                  if (word.charAt(0) == "#") {
                    return (
                      <span
                        key={index}
                        className={styles.hashtag}
                      >{`${word} `}</span>
                    );
                  } else return `${word} `;
                })}
              </p>
              <div className={styles.commentContainer}>
                <p className={styles.commentHeader}>
                  All Replies ({data.comments.length})
                </p>
                {tokenInfo && (
                  <form
                    id="comment-form"
                    autoComplete="off"
                    className={styles.commentForm}
                    onSubmit={(e) => handleSubmit(e)}
                  >
                    <input
                      type="text"
                      name="content"
                      placeholder="Add reply here..."
                      className={styles.commentInput}
                    />
                    <button className={styles.formBtn}>Reply</button>
                  </form>
                )}
                <div className={styles.commentSection}>
                  {data.comments.map((comment) => (
                    <div key={comment._id} className={styles.singleComment}>
                      <h3>@{comment.userName}</h3>
                      <p className={styles.commentDate}>
                        {moment(comment.createdAt).format("LLLL")}
                      </p>
                      {isEdit != comment._id && (
                        <p className={styles.commentContent}>
                          {comment.content.split(" ").map((word, index) => {
                            if (word.charAt(0) == "#") {
                              return (
                                <span
                                  key={index}
                                  className={styles.hashtag}
                                >{`${word} `}</span>
                              );
                            } else return `${word} `;
                          })}
                        </p>
                      )}
                      {value && isEdit == comment._id && (
                        <input
                          value={value}
                          className={styles.editInput}
                          onChange={(e) => setValue(e.target.value)}
                        />
                      )}
                      {tokenInfo &&
                        tokenInfo.user.userId == comment.userId &&
                        isEdit == comment._id && (
                          <div className={styles.Btns}>
                            <button
                              className={styles.submitBtn}
                              onClick={() => handleEdit(comment._id)}
                            >
                              Submit
                            </button>
                            <button
                              className={styles.cancelBtn}
                              onClick={() => setIsEdit(null)}
                            >
                              Cancel
                            </button>
                          </div>
                        )}
                      {tokenInfo &&
                        tokenInfo.user.userId == comment.userId &&
                        !isEdit && (
                          <div className={styles.Btns}>
                            <button
                              className={styles.editBtn}
                              onClick={() => {
                                setIsEdit(comment._id);
                                setValue(comment.content);
                              }}
                            >
                              Edit
                            </button>
                            <button
                              className={styles.deleteBtn}
                              onClick={() => handleDelete(comment._id)}
                            >
                              Delete
                            </button>
                          </div>
                        )}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </main>
    </>
  );
};

export default SingleThread;
